var stadistics = $("#user_answers_chart").data("stadistics");
var data = [
    {label: 'OK', val: stadistics.total_ok},
    {label: 'WA', val: stadistics.total_wa},
    {label: 'RE', val: stadistics.total_re},
    {label: 'CE', val: stadistics.total_ce},
    {label: 'TLE', val: stadistics.total_tle}
];

var w = $("#user_answers_chart").parent().width() * 0.75,
    h = 400,
    r = Math.min(w, h) / 2,
    labelr = r + 30, // radius for label anchor
    color = d3.scaleOrdinal(d3.schemeCategory20),
    donut = d3.pie();;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


arc = d3.arc()
    .innerRadius(r * .6)
    .outerRadius(r);

var vis = d3.select("#user_answers_chart")
    .append("svg:svg")
    .data([data])
    .attr("width", w + 150)
    .attr("height", h);

var arcs = vis.selectAll("g.arc")
    .data(donut.value(function (d) {
        return d.val
    }))
    .enter().append("svg:g")
    .attr("class", "arc")
    .attr("transform", "translate(" + (r + 30) + "," + r + ")");

arcs.append("svg:path")
    .attr("fill", function (d, i) {
        return color(i);
    })
    .attr("d", arc);

arcs.append("svg:text")
    .attr("transform", function (d) {
        var textWidth = getTextWidth(d.data.val.toString(), "Arial");
        return "translate(" + (arc.centroid(d)[0] - textWidth) + "," + arc.centroid(d)[1] + ")";
    })
    .attr("dy", ".35em")
    .attr("text-anchor", function (d) {
        // are we past the center?
        return (d.endAngle + d.startAngle) / 2 > Math.PI ?
            "end" : "start";
    })
    .text(function (d) {
        if (d.value > 0)
            return data[d.index].label + ": " + d.value.toFixed(2);
        return ""
    });

function getTextWidth(text, font) {
    var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
    var context = canvas.getContext("2d");
    context.font = font;
    var metrics = context.measureText(text);
    return metrics.width;
}