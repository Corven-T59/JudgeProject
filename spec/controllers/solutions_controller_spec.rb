require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SolutionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Solution. As you add validations to Solution, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
        user: FactoryGirl.create(:user),
        contest: FactoryGirl.create(:contest),
        problem: FactoryGirl.create(:problem),
        language: :rb,
        solutionFile: Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'support', 'files', 'basic', 'ruby', 'source.rb'))
    }
  }

  let(:valid_for_create){
    {
        language: :rb,
        solutionFile: Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'support', 'files', 'basic', 'ruby', 'source.rb'))
    }
  }

  let(:invalid_attributes) {
    {
        language: :rb,
        problem: FactoryGirl.create(:problem),
        contest: FactoryGirl.create(:contest),
    }
  }

  describe "GET #index" do
    it "assigns all solutions as @solutions" do
      solution = Solution.create! valid_attributes
      get :index, params: {contest_id: solution.contest.to_param}
      expect(assigns(:solutions)).to eq([solution])
    end
  end

  describe "GET #show" do
    it "assigns the requested solution as @solution" do
      solution = Solution.create! valid_attributes
      get :show, params: {id: solution.to_param, contest_id: solution.contest.to_param}
      expect(assigns(:solution)).to eq(solution)
    end
  end

  describe "GET #new" do
    login_user
    it "assigns a new solution as @solution" do
      contest = FactoryGirl.create(:contest)
      get :new, params: {contest_id: contest.to_param}
      expect(assigns(:solution)).to be_a_new(Solution)
    end
  end

  describe "POST #create" do
    before(:each) do
      @contest = FactoryGirl.create(:contest)
      @problem = FactoryGirl.create(:problem)
      valid_for_create[:problem_id] = @problem.to_param
    end
    context "with valid params" do
      login_user
      it "creates a new Solution" do
        expect {
          post :create, params: {solution: valid_for_create, contest_id: @contest.to_param}
        }.to change(Solution, :count).by(1)
      end

      it "assigns a newly created solution as @solution" do
        post :create, params: {solution: valid_for_create, contest_id: @contest.to_param}
        expect(assigns(:solution)).to be_a(Solution)
        expect(assigns(:solution)).to be_persisted
      end

      it "redirects to the created solution" do
        post :create, params: {solution: valid_for_create, contest_id: @contest.to_param}
        expect(response).to redirect_to([@contest,Solution.last])
      end

      it "add a new item to ExecutionsWorker" do
        expect {
          post :create, params: {solution: valid_for_create, contest_id: @contest.to_param}
        }.to change(ExecutionsWorker.jobs, :size).by(1)
      end
    end

    context "with invalid params" do
      login_user
      it "assigns a newly created but unsaved solution as @solution" do
        post :create, params: {solution: invalid_attributes, contest_id: @contest.to_param}
        expect(assigns(:solution)).to be_a_new(Solution)
      end

      it "re-renders the 'new' template" do
        post :create, params: {solution: invalid_attributes, contest_id: @contest.to_param}
        expect(response).to render_template("new")
      end

      pending ("Not running contest")
    end

    context "Without a valid session" do
      it "Dont create a new solution" do
        expect {
          post :create, params: {solution: valid_for_create, contest_id: @contest.to_param}
        }.to change(Solution, :count).by(0)
      end
      it "redirects to the index" do
        post :create, params: {solution: valid_for_create, contest_id: @contest.to_param}
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  xdescribe "DELETE #destroy" do
    it "destroys the requested solution" do
      solution = Solution.create! valid_attributes
      expect {
        delete :destroy, params: {id: solution.to_param}
      }.to change(Solution, :count).by(-1)
    end

    it "redirects to the solutions list" do
      solution = Solution.create! valid_attributes
      delete :destroy, params: {id: solution.to_param}
      expect(response).to redirect_to(solutions_url)
    end
  end

  context "Ruby" do
    login_user
    before(:each) do
      @contest = FactoryGirl.create(:contest)
      @problem = FactoryGirl.create(:problem)
      valid_for_create[:problem_id] = @problem.to_param
    end
    it "Create the solution" do
      expect {
        post :create, params: {solution: valid_for_create, contest_id: @contest.to_param}
      }.to change(Solution, :count).by(1)
    end

    it "Creates a new run" do
      expect{
        post :create, params: {solution: valid_for_create, contest_id: @contest.to_param}
      }.to change(ExecutionsWorker.jobs, :size).by(1)
    end

  end
end
