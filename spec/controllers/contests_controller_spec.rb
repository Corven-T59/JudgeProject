require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ContestsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Contest. As you add validations to Contest, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {
      title: "Test title",
      description: "Test description",
      difficulty: "easy",
      startDate: DateTime.now + 1.hour,
      endDate: DateTime.now + 3.hours
  } }
  let(:valid_for_create_solution){
    {
        language: :rb,
        solutionFile: File.join(Rails.root, 'spec','support', 'files','ruby', 'source.rb')
    }
  }
  let(:invalid_attributes) {
    {
        title: "",
        description: "",
        startDate: (DateTime.now - 1.seconds),
        endDate: DateTime.now - 1.minute
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ContestsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all contests as @contests" do
      contest = FactoryGirl.create(:contest)
      get :index
      expect(assigns(:contests)).to eq([contest])
    end
  end

  describe "GET #show" do
    it "assigns the requested contest as @contest" do
      contest = FactoryGirl.create(:contest)
      get :show, params: {id: contest.to_param}
      expect(assigns(:contest)).to eq(contest)
    end
  end

  describe "GET #new" do
    login_admin
    it "assigns a new contest as @contest" do
      get :new, params: {}
      expect(assigns(:contest)).to be_a_new(Contest)
    end
  end

  describe "GET #edit" do
    login_admin
    it "assigns the requested contest as @contest" do
      contest = FactoryGirl.create(:contest)
      get :edit, params: {id: contest.to_param}
      expect(assigns(:contest)).to eq(contest)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      login_admin
      it "creates a new Contest" do
        expect {
          post :create, params: {contest: valid_attributes}
        }.to change(Contest, :count).by(1)
      end

      it "assigns a newly created contest as @contest" do
        post :create, params: {contest: valid_attributes}
        expect(assigns(:contest)).to be_a(Contest)
        expect(assigns(:contest)).to be_persisted
      end

      it "redirects to the created contest" do
        post :create, params: {contest: valid_attributes}
        expect(response).to redirect_to(Contest.last)
      end
    end

    context "with invalid params" do
      login_admin
      it "assigns a newly created but unsaved contest as @contest" do
        post :create, params: {contest: invalid_attributes}
        expect(assigns(:contest)).to be_a_new(Contest)
      end

      it "re-renders the 'new' template" do
        post :create, params: {contest: invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    login_admin
    context "with valid params" do
      let(:new_attributes) {
        {title: "Update the title"}
      }

      it "updates the requested contest" do
        contest = Contest.create! valid_attributes
        put :update, params: {id: contest.to_param, contest: new_attributes}
        contest.reload
        expect(contest.title).to eq("Update the title")
      end

      it "assigns the requested contest as @contest" do
        contest = Contest.create! valid_attributes
        put :update, params: {id: contest.to_param, contest: valid_attributes}
        expect(assigns(:contest)).to eq(contest)
      end

      it "redirects to the contest" do
        contest = Contest.create! valid_attributes
        put :update, params: {id: contest.to_param, contest: valid_attributes}
        expect(response).to redirect_to(contest)
      end
    end

    context "with invalid params" do
      it "assigns the contest as @contest" do
        contest = Contest.create! valid_attributes
        put :update, params: {id: contest.to_param, contest: invalid_attributes}
        expect(assigns(:contest)).to eq(contest)
      end

      it "re-renders the 'edit' template" do
        contest = Contest.create! valid_attributes
        put :update, params: {id: contest.to_param, contest: invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    login_admin
    it "destroys the requested contest" do
      contest = Contest.create! valid_attributes
      expect {
        delete :destroy, params: {id: contest.to_param}
      }.to change(Contest, :count).by(-1)
    end

    it "redirects to the contests list" do
      contest = Contest.create! valid_attributes
      delete :destroy, params: {id: contest.to_param}
      expect(response).to redirect_to(contests_url)
    end
  end

  describe "Actions without valid session" do
  end
end
